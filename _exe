#!/usr/bin/env php-cgi
<?php
header('Content-type: text/plain');
header('Cache-Control: no-store, no-cache, must-revalidate, max-age=0');

$root=$_SERVER["KPHOME"];
$KPSECRETS=$_SERVER["KPSECRETS"];
$admin = FALSE;

$virtualattrs = array("delete", "update", "admin");

date_default_timezone_set(ini_get('date.timezone'));

$sesid = $_COOKIE['session'];
if (!filter_var($sesid, FILTER_VALIDATE_REGEXP, array("options"=>array("regexp"=>"/^[a-z0-9]+$/")))) {
  header("HTTP/1.1 403 Forbidden: invalid session");
  exit(0);
}
if(!file_exists($root."/tmp/KP-".$sesid)) {
  header("HTTP/1.1 403 Forbidden: no session object");
  exit(0);
}
list($name, $nonce) = explode("\n", file_get_contents($root."/tmp/KP-".$sesid));
if (!filter_var($name, FILTER_VALIDATE_REGEXP, array("options"=>array("regexp"=>"/^[a-z0-9]+$/")))) {
  header("HTTP/1.1 403 Forbidden: bad username");
  exit(0);
}

$a=explode("/", $_SERVER["PATH_INFO"]);
$job=$a[1];
$attr=$a[2];
if (!filter_var($job, FILTER_VALIDATE_REGEXP, array("options"=>array("regexp"=>"/^[-_a-zA-Z0-9]+$/")))) {
  header("HTTP/1.1 403 Forbidden: invalid job syntax");
  exit(0);
}
if (!filter_var($attr, FILTER_VALIDATE_REGEXP, array("options"=>array("regexp"=>"/^[a-z0-9]+$/")))) {
  header("HTTP/1.1 403 Forbidden: invalid attribute syntax");
  exit(0);
}

if($attr == "logs") {
  $history = array();
  
  $dir = $root."/log";
  if($dh = opendir($dir)) {
    while (($file = readdir($dh)) !== false) {
      if($file == ".") continue;
      if($file == "..") continue;
      $ending = substr(strrchr($file,'.'),1);
      if($ending != "job") continue;
      $fn = $dir."/".$file;
      $logjob=file_get_contents($fn);
      if($logjob == $job) {
	$f = strstr($file,'.', 1);
	if(file_exists($root."/log/".$f.".status")) {
	  $status = file_get_contents($root."/log/".$f.".status");
	  array_push($history, "$f $status");
	}
	else
	  array_push($history, "$f r");
      }
    }
    closedir($dh);
  }
  rsort($history);
  array_splice($history, 10);
  foreach ($history as $key => $hentry) {
    print "$hentry\n";
  }  
  exit(0);
}

if(!in_array($attr, $virtualattrs)) {
  if(!file_exists($root."/exe/".$job."/".$attr)) {
    header("HTTP/1.1 404 attribute does not exist");
    exit(0);
  }
}

function printattr($fn) {
  $out = file_get_contents($fn);
  $out = htmlspecialchars($out);
  print $out;
  exit(0);
}

function nonemptystr($var) {
  return strlen($var) > 0;
}

function getvalidator($root, $job, $param) {
  $pfx = "";
  
  $fn = $root."/exe/".$job."/".$param;
  if(!file_exists($fn)) {
    return "";
  }
  $p = rtrim(file_get_contents($fn));
  $a = explode(":", $p);
  array_shift($a);
  $a = explode(" ", implode(":", $a));
  $a = array_values(array_filter($a, "nonemptystr"));
  if($a[0] == "checkbox") $pfx = "list:";
  return $pfx.$a[1];
}

function validate_param($param, $validator) {
  $extra="";
  if(substr($validator,0,5) == "list:") {
    $validator = substr($validator, 5);
    $extra = ",";
  }

  # Optional. Parameter may be empty
  if(substr($validator,0,4) == "opt:") {
    $validator = substr($validator, 4);
    if(strlen($_REQUEST[$param]) == 0) return 0;
  }
  if($validator == "alnum") {
    if (filter_var($_REQUEST[$param], FILTER_VALIDATE_REGEXP, array("options"=>array("regexp"=>"/^[A-ZÅ-Öa-zå-ö0-9".$extra."]+$/")))) {
      return 0;
    }
    return 1;
  }
  if($validator == "alpha") {
    if (filter_var($_REQUEST[$param], FILTER_VALIDATE_REGEXP, array("options"=>array("regexp"=>"/^[A-ZÅ-Öa-zå-ö".$extra."]+$/"))))
      return 0;
    return 1;
  }
  if($validator == "num") {
    if (filter_var($_REQUEST[$param], FILTER_VALIDATE_REGEXP, array("options"=>array("regexp"=>"/^[0-9".$extra."]+$/"))))
      return 0;
    return 1;
  }
  if($validator == "path") {
    if (filter_var($_REQUEST[$param], FILTER_VALIDATE_REGEXP, array("options"=>array("regexp"=>":^[A-ZÅ-Öa-zå-ö0-9/_.".$extra."-]+$:"))))
      return 0;
    return 1;
  }
  if($validator == "url") {
    if (filter_var($_REQUEST[$param], FILTER_VALIDATE_REGEXP, array("options"=>array("regexp"=>",^[A-Za-z0-9/_+.%:".$extra."-]+$,"))))
      return 0;
    return 1;
  }

  return 1;
}

/*
 * Copies files from directory $src to directory $dst
 * $dst must exist
 */
function copyfiles($src, $dst) {
  if(!file_exists($dst)) return 0;
  if(!file_exists($src)) return 0;
  
  if($dh = opendir($src)) {
    while (($file = readdir($dh)) !== false) {
      if($file == ".") continue;
      if($file == "..") continue;
      copy($src."/".$file, $dst."/".$file);
    }
    closedir($dh);
  }
}

function kp_log($root, $message) {
  $d = date("Ymd\-G\:i\:s");
  $message = str_replace("\n", " ", $message);
  file_put_contents( $root."/log/kp.log", $d." ".$message."\n", FILE_APPEND);
}

/*
 * Removes files from directory $dst
 */
function deldir($dst) {
  if(!file_exists($dst)) return 0;
  if($dh = opendir($dst)) {
    while (($file = readdir($dh)) !== false) {
      if($file == ".") continue;
      if($file == "..") continue;
      if(is_dir($dst."/".$file)) {
	if(!rmdir($dst."/".$file))
	  deldir($dst."/".$file);
      } else {
	unlink($dst."/".$file);
      }
    }
    closedir($dh);
    rmdir($dst);
  }
}

$roles = array();

/* Fetch user roles */
$dir = $root."/auth";
if($dh = opendir($dir)) {
  while (($file = readdir($dh)) !== false) {
    if($file == ".") continue;
    if($file == "..") continue;
    $fn = $dir."/".$file;
    $users=file_get_contents($fn);
    $u = explode("\n", $users);
    foreach ($u as $key => $user) {
      if($user == $name) {
	array_push($roles, $file);
	break;
      }
    }
  }
  closedir($dh);
} else {
  header("HTTP/1.1 503 could not open $dir");
  kp_log( $root, "503 could not open $dir\n");
  exit(0);
}

if(!count($roles)) {
  header("HTTP/1.1 403 Forbidden: no roles for $name");
  kp_log( $root, "Forbidden: no roles for $name\n");
  exit(0);
}

# Check authorization
$fn = $root."/exe/".$job."/roles";
$permitted=0;
if(file_exists($fn)) {
  $jobroles=file_get_contents($fn);
  $u = explode("\n", $jobroles);
  foreach ($u as $key => $role) {
    if(in_array($role,$roles)) {
      $permitted=1;
      break;
    }
  }
}

$createjob = FALSE;
$fn = $root."/etc/admin";
if(file_exists($fn)) {
  $createroles = file_get_contents($fn);
  $u = explode("\n", $createroles);
  foreach ($u as $key => $role) {
    if(in_array($role,$roles)) {
      $createjob=TRUE;
      break;
    }
  }
}

$fn = $root."/exe/".$job."/adminroles";
if(file_exists($fn)) {
  $adminroles = file_get_contents($fn);
  $u = explode("\n", $adminroles);
  foreach ($u as $key => $role) {
    if(in_array($role,$roles)) {
      $admin = TRUE;
      $permitted=1;
      break;
    }
  }
}

if(file_exists($root."/exe/".$job."/creator")) {
  $creator = rtrim(file_get_contents($root."/exe/".$job."/creator"));
  if($creator == $name) {
    $admin = TRUE;
    $permitted=1;
  }
}

$fn = $root."/exe/".$job."/".$attr;

if($_SERVER['REQUEST_METHOD'] == 'GET') {
  if(!file_exists($root."/exe/".$job)) {
    header("HTTP/1.1 404 job does not exist");
    exit(0);
  }
  
  if($attr == 'description') printattr($fn);
  if($attr == 'name') printattr($fn);
  $attrpfx = substr($attr, 0, 5);
  if($attrpfx == 'param') printattr($fn);
  if($attr == 'roles') printattr($fn);
  if($attr == 'adminroles') printattr($fn);
  if($attr == 'tags') printattr($fn);
  if($attr == 'serial') printattr($fn);
  if($attr == 'options') {
  	$out = file_get_contents($fn);
  	print $out;
	exit(0);
  }
  if($attr == 'autodesc') { print "true"; exit(0); }
  if($attr == 'run') {
    if($admin == TRUE) {
  	$out = file_get_contents($fn);
  	print $out;
	exit(0);
    } else {
      print "true"; exit(0);
    }
  }
  if($attr == 'admin') {
    if($admin == TRUE) {
      print "1";
    } else {
      print "0";
    }
    exit(0);
  }
}

if($_SERVER['REQUEST_METHOD'] == 'POST') {
  /* check nonce */
  if(!isset($_REQUEST['nonce'])) {
    header("HTTP/1.1 403 Forbidden: $name, nonce missing");
    kp_log($root, "$name, nonce missing");
    exit(0);
  }
  if($nonce != $_REQUEST['nonce']) {
    header("HTTP/1.1 403 Forbidden: $name, nonce mismatch");
    kp_log($root, "$name, nonce mismatch");
    exit(0);
  }

  # Clear out old sessions
  $dir = $root."/tmp";
  $old = time() - $_SERVER["KPSESSIONTIMEOUT"]*60;
  if($dh = opendir($dir)) {
    while (($file = readdir($dh)) !== false) {
      if($file == ".") continue;
      if($file == "..") continue;
      $pfx = substr($file, 0, 3);
      if($pfx != "KP-") continue;
      
      $fn = $dir."/".$file;
      $mtime = filemtime($fn);
      if($mtime < $old) {
	unlink($fn);
      }
    }
    closedir($dh);
  }

  # keep session alive
  if(file_exists($root."/tmp/KP-".$sesid))
    touch($root."/tmp/KP-".$sesid);
  
  # Delete job
  if($attr == 'delete') {
    if(!file_exists($root."/exe/".$job)) {
      header("HTTP/1.1 404 job does not exist");
      exit(0);
    }
    if($admin != TRUE) {
      header("HTTP/1.1 403 Forbidden: not creator or admin");
      print "not creator or admin";
      kp_log( $root, "$name not creator or admin of job $job\n");
      exit(0);
    }
    kp_log( $root, "User $name deletes $job");
    deldir($root."/exe/".$job);
    deldir($root."/secrets/".$KPSECRETS."/".$job);
    exit(0);
  }

  # Update job
  if($attr == 'update') {
    if(isset($_REQUEST['create'])) {
      if(!$createjob) {
	header("HTTP/1.1 403 Forbidden: $name not allowed to create jobs");
	kp_log($root, "$name not allowed to create jobs");
	exit(0);
      }
      if(file_exists($root."/exe/".$job)) {
	header("HTTP/1.1 404 job already exist");
	kp_log($root, "job $job already exist");
	exit(0);
      }
      if(mkdir($root."/exe/".$job)===FALSE) {
	header("HTTP/1.1 404 failed to create job directory");
	kp_log($root, "failed to create job directory: ".$root."/exe/".$job);
	exit(0);
      }
      kp_log($root, "$name created job $job");
      $admin = TRUE;
      file_put_contents($root."/exe/".$job."/creator", $name);
    }
     if($admin != TRUE) {
      header("HTTP/1.1 403 Forbidden: not creator or admin");
      print "not creator or admin";
      kp_log( $root, "$name not creator or admin of job $job\n");
      exit(0);
    }
    kp_log( $root, "User $name updates $job");
    if(file_put_contents( $root."/exe/".$job."/description", $_REQUEST['description'])===FALSE) {
      kp_log( $root, "User $name updates $job. description failed");
      header("HTTP/1.1 500 User $name updates $job. Failed to update description");
      exit(0);
    }
    if(strlen($_REQUEST['nicename']) > 1) {
      if(file_put_contents( $root."/exe/".$job."/name", $_REQUEST['nicename'])===FALSE) {
	kp_log( $root, "User $name updates $job. nicename failed");
	header("HTTP/1.1 500 User $name updates $job. Failed to update nicename");
	exit(0);
      }
    } else {
      kp_log($root, "User $name removes $job/name");
      unlink( $root."/exe/".$job."/name" );
    }
    if(strlen($_REQUEST['adminroles']) > 1) {
      if(file_put_contents( $root."/exe/".$job."/adminroles", $_REQUEST['adminroles'])===FALSE) {
	kp_log( $root, "User $name updates $job. adminroles failed\n");
	header("HTTP/1.1 500 User $name updates $job. Failed to update adminroles");
	exit(0);
      }
    } else {
      kp_log($root, "User $name removes $job/adminroles");
      unlink( $root."/exe/".$job."/adminroles" );
    }

    if(file_put_contents( $root."/exe/".$job."/roles", $_REQUEST['roles'])===FALSE) {
      kp_log( $root, "User $name updates $job. roles failed\n");
      header("HTTP/1.1 500 User $name updates $job. Failed to update roles");
      exit(0);
    }
    if(file_put_contents( $root."/exe/".$job."/tags", $_REQUEST['tags'])===FALSE) {
      kp_log( $root, "User $name updates $job. tags failed\n");
      header("HTTP/1.1 500 User $name updates $job. Failed to update tags");
      exit(0);
    }
    if(file_put_contents( $root."/exe/".$job."/serial", $_REQUEST['serial'])===FALSE) {
      kp_log( $root, "User $name updates $job. serial failed\n");
      header("HTTP/1.1 500 User $name updates $job. Failed to update serial");
      exit(0);
    }
    if(file_put_contents( $root."/exe/".$job."/options", $_REQUEST['options'])===FALSE) {
      kp_log( $root, "User $name updates $job. options failed\n");
      header("HTTP/1.1 500 User $name updates $job. Failed to update options");
      exit(0);
    }

    for ($i = 1; ; $i++) {
      if(isset($_REQUEST['param'.$i])) {
	if(strlen($_REQUEST['param'.$i]) > 1) {
	  if(file_put_contents( $root."/exe/".$job."/param".$i, $_REQUEST['param'.$i])===FALSE) {
	    kp_log( $root, "User $name updates $job. param$i failed\n");
	    header("HTTP/1.1 500 User $name updates $job. Failed to update param".$i);
	    exit(0);
	  }
	} else {
	  if(file_exists($root."/exe/".$job."/param".$i)) {
	    kp_log($root, "User $name removes $job/param".$i);
	    unlink( $root."/exe/".$job."/param".$i );
	  }
	}
      } else {
	if($i > 10)
	  break;
      }
    }
    if(strlen($_REQUEST['run']) > 1) {
      if(file_put_contents( $root."/exe/".$job."/run", $_REQUEST['run'])===FALSE) {
	kp_log( $root, "User $name updates $job. run failed\n");
	header("HTTP/1.1 500 User $name updates $job. Failed to update run");
	exit(0);
      }
    } else {
      kp_log($root, "User $name removes $job/run");
      unlink( $root."/exe/".$job."/run" );
    }

    exit(0);
  }

  # Execute job
  if($attr == 'run') {
    if(!file_exists($root."/exe/".$job)) {
      header("HTTP/1.1 404 job does not exist");
      exit(0);
    }
    if(!$permitted) {
      header("HTTP/1.1 403 Forbidden: roles");
      kp_log( $root, "User $name execute: $job Forbidden: roles\n");
      print_r($roles);
      exit(0);
    }
    $maxparam=0;
    for ($i = 1; ; $i++) {
      if(isset($_REQUEST['param'.$i])) {
	$validator = getvalidator($root, $job, 'param'.$i);
	if($validator) {
	  if(validate_param('param'.$i, $validator)) {
	    header("HTTP/1.1 403 Forbidden: invalid input: param$i validator: $validator");
	    print "invalid input: '".$_REQUEST['param'.$i]."' validator: $validator";
	    kp_log( $root, "User $name execute: $job param$i invalid input: '".$_REQUEST['param'.$i]."' validator: $validator\n");
	    exit(0);
	  }
	  putenv("PARAM".$i."=".$_REQUEST['param'.$i]);
	  $maxparam=$i;
	}
      } else {
	if($i > 10) break;
      }
    }
    
    $d = date("Ymd\-H\:i\:s\-").$name;
    if (! function_exists('pcntl_fork')) {
      header("HTTP/1.1 503 PCNTL functions not available on this PHP installation. KP wont work");
      print('PCNTL functions not available on this PHP installation. KP wont work!');
      kp_log( $root, "PCNTL functions not available on this PHP installation. KP wont work!\n");
      exit(0);
    }

    $serial="no";
    if(file_exists("$root/exe/$job/serial")) {
      $serial=rtrim(file_get_contents("$root/exe/$job/serial"));
    }

    kp_log( $root, "User $name executes: $job log: $d\n");
    $pid = pcntl_fork();
    if($pid == 0) {
      posix_setsid();
      file_put_contents("$root/log/$d.job", $job);
      $t = time();
      file_put_contents("$root/log/$d.start", $t);
      $r = file_get_contents($root."/exe/".$job."/roles");
      file_put_contents("$root/log/$d.roles", $r);
      $r = json_encode($r);
      $p = posix_getpid();
      file_put_contents("$root/log/$d.pid", $p);
      
      $pjson = "[ ";
      for ($i = 1;$i <= $maxparam ; $i++) {
      	  $pp = json_encode($_REQUEST['param'.$i]);
	  if ( $i < $maxparam ) $pp = $pp.", ";
      	  $pjson = $pjson.$pp;
      }
      $pjson = $pjson." ]";
      $dd = json_encode($d);
      file_put_contents("$root/log/$d.json", "{ \"log\": $dd, \"params\": $pjson, \"start\": $t, \"job\": \"$job\", \"pid\": $p, \"roles\": $r }");

      if($serial == "yes") {
	kp_log( $root, "$job is serialized, checking lock: $root/tmp/RUN-$job");
	$pid = posix_getpid();
	
	while(TRUE) {
	  if(!is_link("$root/tmp/RUN-$job")) {
	    symlink("$pid", "$root/tmp/RUN-$job");
	  }
	  $jobpid = readlink("$root/tmp/RUN-$job");
	  if($jobpid == $pid) {
	    break;
	  }
	  if($jobpid) {
	    kp_log( $root, "lockfile $root/tmp/RUN-$job exists");
	    if(posix_kill($jobpid, 0)===FALSE) {
	      unlink("$root/tmp/RUN-$job");
	      continue;
	    }
	    kp_log( $root, "$name: Forbidden: job $job is serialized and already running");
	  } else {
	    kp_log( $root, "Could not create lockfile $root/tmp/RUN-$job");
	  }
	  file_put_contents("$root/log/$d", "$job is serialized and already running");
	  file_put_contents("$root/log/$d.end", time());
	  file_put_contents("$root/log/$d.status", "255");
	  posix_kill(posix_getpid(), SIGKILL);
	  exit(2);
	}
	kp_log($root, "Created lockfile $root/tmp/RUN-$job for pid $pid");
      }

      $secrets = $root."/secrets/".$KPSECRETS."/".$job;
      putenv("KPSECRETS"); # Security: dont leak secret to jobs
      
      if($_SERVER["KPSANDBOX"] == "yes") {
	  $rundir = $root."/saferun";
	  #system("tar cf - $secrets|sandbox $root/exe/$job/run >> $root/log/$d 2>> $root/log/$d < /dev/null", $status);
      } else {
	# create runtime directory
	$rundir = $root."/run/".$d;
	mkdir($rundir);
	putenv("HOME=".$rundir);
      
	# populate with per-job secrets
	if(file_exists($secrets)) {
	  copyfiles($root."/secrets/".$KPSECRETS."/".$job, $rundir);
	}

	# copy script
	if(copy("$root/exe/$job/run", $rundir."/run") == FALSE) {
	  kp_log( $root, "User $name exec $job. copy(run) failed\n");
	}
	if(chmod($rundir."/run", 0755) == FALSE) {
	  kp_log( $root, "User $name exec $job. chmod(run) failed\n");
	}

	# change cwd to runtime directory
	chdir($rundir);
	system("$rundir/run >> $root/log/$d 2>> $root/log/$d < /dev/null", $status);
	deldir($rundir);
      }
      file_put_contents("$root/log/$d.end", time());
      file_put_contents("$root/log/$d.status", $status);
      kp_log( $root, "Execution of $job complete (invoked by $name) log: $d status: $status");
      if($serial == "yes") {
	unlink("$root/tmp/RUN-$job");
      }
      
      # Since I never managed to close stdout and stderr within PHP, we kill our process instead.
      # If we dont do this PHP will output headers from the child also..
      posix_kill(posix_getpid(), SIGKILL);
      exit(0);
    }
    print $d;
    exit(0);
  }
}

header("HTTP/1.1 404 Nope");
?>
