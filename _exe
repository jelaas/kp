#!/usr/bin/env php-cgi
<?php
header('Content-type: text/plain');
header('Cache-Control: no-store, no-cache, must-revalidate, max-age=0');

$root=$_SERVER["KPHOME"];
$KPSECRETS=$_SERVER["KPSECRETS"];

date_default_timezone_set(ini_get('date.timezone'));

$sesid = $_COOKIE['session'];
if (!filter_var($sesid, FILTER_VALIDATE_REGEXP, array("options"=>array("regexp"=>"/^[a-z0-9]+$/")))) {
  header("HTTP/1.1 403 Forbidden: invalid session");
  exit(0);
}
if(!file_exists($root."/tmp/KP-".$sesid)) {
  header("HTTP/1.1 403 Forbidden: no session object");
  exit(0);
}
$name = file_get_contents($root."/tmp/KP-".$sesid);
if (!filter_var($name, FILTER_VALIDATE_REGEXP, array("options"=>array("regexp"=>"/^[a-z0-9]+$/")))) {
  header("HTTP/1.1 403 Forbidden: bad username");
  exit(0);
}

$a=explode("/", $_SERVER["PATH_INFO"]);
$job=$a[1];
$attr=$a[2];
if (!filter_var($job, FILTER_VALIDATE_REGEXP, array("options"=>array("regexp"=>"/^[-_a-zA-Z0-9]+$/")))) {
  header("HTTP/1.1 403 Forbidden: invalid job syntax");
  exit(0);
}
if (!filter_var($attr, FILTER_VALIDATE_REGEXP, array("options"=>array("regexp"=>"/^[a-z0-9]+$/")))) {
  header("HTTP/1.1 403 Forbidden: invalid attribute syntax");
  exit(0);
}

if($attr == "logs") {
  $history = array();
  
  $dir = $root."/log";
  if($dh = opendir($dir)) {
    while (($file = readdir($dh)) !== false) {
      if($file == ".") continue;
      if($file == "..") continue;
      $ending = substr(strrchr($file,'.'),1);
      if($ending != "job") continue;
      $fn = $dir."/".$file;
      $logjob=file_get_contents($fn);
      if($logjob == $job) {
	$f = strstr($file,'.', 1);
	array_push($history, $f);
      }
    }
    closedir($dh);
  }
  rsort($history);
  array_splice($history, 10);
  foreach ($history as $key => $hentry) {
    print "$hentry\n";
  }  
  exit(0);
}

if(!file_exists($root."/exe/".$job)) {
  header("HTTP/1.1 404 job does not exist");
  exit(0);
}
if($attr != "update") {
  if(!file_exists($root."/exe/".$job."/".$attr)) {
    header("HTTP/1.1 404 attribute does not exist");
    exit(0);
  }
}

$fn = $root."/exe/".$job."/".$attr;

function printattr($fn) {
  $out = file_get_contents($fn);
  $out = htmlspecialchars($out);
  print $out;
  exit(0);	 
}

function nonemptystr($var) {
  return strlen($var) > 0;
}

function getvalidator($root, $job, $param) {
  $fn = $root."/exe/".$job."/".$param;
  if(!file_exists($fn)) {
    return "";
  }
  $p = rtrim(file_get_contents($fn));
  $a = explode(":", $p);
  $a = explode(" ", $a[1]);
  $a = array_values(array_filter($a, "nonemptystr"));
  return $a[1];
}

function validate_param($param, $validator) {
  if($validator == "alnum") {
    if (filter_var($_REQUEST[$param], FILTER_VALIDATE_REGEXP, array("options"=>array("regexp"=>"/^[A-Za-z0-9]+$/")))) {
      return 0;
    }
    return 1;
  }
  if($validator == "alpha") {
    if (filter_var($_REQUEST[$param], FILTER_VALIDATE_REGEXP, array("options"=>array("regexp"=>"/^[A-Za-z]+$/"))))
      return 0;
    return 1;
  }
  if($validator == "num") {
    if (filter_var($_REQUEST[$param], FILTER_VALIDATE_REGEXP, array("options"=>array("regexp"=>"/^[0-9]+$/"))))
      return 0;
    return 1;
  }
  if($validator == "path") {
    if (filter_var($_REQUEST[$param], FILTER_VALIDATE_REGEXP, array("options"=>array("regexp"=>":^[A-Za-z0-9/_.-]+$:"))))
      return 0;
    return 1;
  }
  if($validator == "url") {
    if (filter_var($_REQUEST[$param], FILTER_VALIDATE_REGEXP, array("options"=>array("regexp"=>",^[A-Za-z0-9/_+.%:-]+$,"))))
      return 0;
    return 1;
  }

  return 1;
}

/*
 * Copies files from directory $src to directory $dst
 * $dst must exist
 */
function copyfiles($src, $dst) {
  if(!file_exists($dst)) return 0;
  if(!file_exists($src)) return 0;
  
  if($dh = opendir($src)) {
    while (($file = readdir($dh)) !== false) {
      if($file == ".") continue;
      if($file == "..") continue;
      copy($src."/".$file, $dst."/".$file);
    }
    closedir($dh);
  }
}

function kp_log($root, $message) {
  $d = date("Ymd\-G\:i\:s");
  $message = str_replace("\n", " ", $message);
  file_put_contents( $root."/log/kp.log", $d." ".$message."\n", FILE_APPEND);
}

/*
 * Removes files from directory $dst
 */
function deldir($dst) {
  if(!file_exists($dst)) return 0;
  
  if($dh = opendir($dst)) {
    while (($file = readdir($dh)) !== false) {
      if($file == ".") continue;
      if($file == "..") continue;
      unlink($dst."/".$file);
    }
    closedir($dh);
    rmdir($dst);
  }
}

if($attr == 'description') printattr($fn);
if($attr == 'name') printattr($fn);
if($attr == 'param1') printattr($fn);
if($attr == 'param2') printattr($fn);
if($attr == 'param3') printattr($fn);
if($attr == 'roles') printattr($fn);
if($attr == 'tags') printattr($fn);
if($attr == 'autodesc') { print "true"; exit(0); }
if($_SERVER['REQUEST_METHOD'] == 'GET') {
  if($attr == 'run') {
    if(!file_exists($root."/exe/".$job."/creator")) {
      print "true1"; exit(0);
    }
    $creator = rtrim(file_get_contents($root."/exe/".$job."/creator"));
    if($creator != $name) {
      print "true"; exit(0);
    } else {
      printattr($fn);
    }
  }
}
if($_SERVER['REQUEST_METHOD'] == 'POST') {
  $roles = array();

  /* Fetch user roles */
  $dir = $root."/auth";
  if($dh = opendir($dir)) {
    while (($file = readdir($dh)) !== false) {
      if($file == ".") continue;
      if($file == "..") continue;
      $fn = $dir."/".$file;
      $users=file_get_contents($fn);
      $u = explode("\n", $users);
      foreach ($u as $key => $user) {
	if($user == $name) {
	  array_push($roles, $file);
	  break;
	}
      }
    }
    closedir($dh);
  } else {
    header("HTTP/1.1 503 could not open $dir");
    file_put_contents( $root."/log/kp.log", "503 could not open $dir\n", FILE_APPEND);
    exit(0);
  }

  if(!count($roles)) {
    header("HTTP/1.1 403 Forbidden: no roles for $name");
    file_put_contents( $root."/log/kp.log", "Forbidden: no roles for $name\n", FILE_APPEND);
    exit(0);
  }
  
  # Check authorization
  $fn = $root."/exe/".$job."/roles";
  $permitted=0;
  if(file_exists($fn)) {
    $jobroles=file_get_contents($fn);
    $u = explode("\n", $jobroles);
    foreach ($u as $key => $role) {
      if(in_array($role,$roles)) {
	$permitted=1;
	break;
      }
    }
  }
  
  if(!$permitted) {
    header("HTTP/1.1 403 Forbidden: roles");
    file_put_contents( $root."/log/kp.log", "User $name execute: $job Forbidden: roles\n", FILE_APPEND);
    print_r($roles);
    exit(0);
  }
  
  # Clear out old sessions
  $dir = $root."/tmp";
  $old = time() - $_SERVER["KPSESSIONTIMEOUT"]*60;
  if($dh = opendir($dir)) {
    while (($file = readdir($dh)) !== false) {
      if($file == ".") continue;
      if($file == "..") continue;
      $pfx = substr($file, 0, 3);
      if($pfx != "KP-") continue;
      
      $fn = $dir."/".$file;
      $mtime = filemtime($fn);
      if($mtime < $old) {
	unlink($fn);
      }
    }
    closedir($dh);
  }

  # keep session alive
  if(file_exists($root."/tmp/KP-".$sesid))
    touch($root."/tmp/KP-".$sesid);

  # Update job
  # <job>/creator must be user
  if($attr == 'update') {
    if(!file_exists($root."/exe/".$job."/creator")) {
	header("HTTP/1.1 403 Forbidden: no creator");
	file_put_contents( $root."/log/kp.log", "$name: no creator known for job $job\n", FILE_APPEND);
	exit(0);
    }
    $creator = rtrim(file_get_contents($root."/exe/".$job."/creator"));
    if($creator != $name) {
	header("HTTP/1.1 403 Forbidden: not creator");
	print "not creator $creator";
	file_put_contents( $root."/log/kp.log", "$name not creator $creator of job $job\n", FILE_APPEND);
	exit(0);
    }
    kp_log( $root, "User $name updates $job");
    if(file_put_contents( $root."/exe/".$job."/description", $_REQUEST['description'])===FALSE) {
      kp_log( $root, "User $name updates $job. description failed");
      header("HTTP/1.1 500 User $name updates $job. Failed to update description");
      exit(0);
    }
    if(strlen($_REQUEST['nicename']) > 1) {
      if(file_put_contents( $root."/exe/".$job."/name", $_REQUEST['nicename'])===FALSE) {
	kp_log( $root, "User $name updates $job. nicename failed");
	header("HTTP/1.1 500 User $name updates $job. Failed to update nicename");
	exit(0);
      }
    } else {
      kp_log($root, "User $name removes $job/name");
      unlink( $root."/exe/".$job."/name" );
    }
    if(strlen($_REQUEST['adminroles']) > 1) {
      if(file_put_contents( $root."/exe/".$job."/adminroles", $_REQUEST['adminroles'])===FALSE) {
	kp_log( $root, "User $name updates $job. adminroles failed\n");
	header("HTTP/1.1 500 User $name updates $job. Failed to update adminroles");
	exit(0);
      }
    } else {
      kp_log($root, "User $name removes $job/adminroles");
      unlink( $root."/exe/".$job."/adminroles" );
    }

    if(file_put_contents( $root."/exe/".$job."/roles", $_REQUEST['roles'])===FALSE) {
      kp_log( $root, "User $name updates $job. roles failed\n");
      header("HTTP/1.1 500 User $name updates $job. Failed to update roles");
      exit(0);
    }
    if(file_put_contents( $root."/exe/".$job."/tags", $_REQUEST['tags'])===FALSE) {
      kp_log( $root, "User $name updates $job. tags failed\n");
      header("HTTP/1.1 500 User $name updates $job. Failed to update tags");
      exit(0);
    }

    if(strlen($_REQUEST['param1']) > 1) {
      if(file_put_contents( $root."/exe/".$job."/param1", $_REQUEST['param1'])===FALSE) {
	kp_log( $root, "User $name updates $job. param1 failed\n");
	header("HTTP/1.1 500 User $name updates $job. Failed to update param1");
	exit(0);
      }
    } else {
      kp_log($root, "User $name removes $job/param1");
      unlink( $root."/exe/".$job."/param1" );
    }
    if(strlen($_REQUEST['param2']) > 1) {
      if(file_put_contents( $root."/exe/".$job."/param2", $_REQUEST['param2'])===FALSE) {
	kp_log( $root, "User $name updates $job. param2 failed\n");
	header("HTTP/1.1 500 User $name updates $job. Failed to update param2");
	exit(0);
      }
    } else {
      kp_log($root, "User $name removes $job/param2");
      unlink( $root."/exe/".$job."/param2" );
    }
    if(strlen($_REQUEST['param3']) > 1) {
      if(file_put_contents( $root."/exe/".$job."/param3", $_REQUEST['param3'])===FALSE) {
	kp_log( $root, "User $name updates $job. param3 failed\n");
	header("HTTP/1.1 500 User $name updates $job. Failed to update param3");
	exit(0);
      }
    } else {
      kp_log($root, "User $name removes $job/param3");
      unlink( $root."/exe/".$job."/param3" );
    }
    if(strlen($_REQUEST['run']) > 1) {
      if(file_put_contents( $root."/exe/".$job."/run", $_REQUEST['run'])===FALSE) {
	kp_log( $root, "User $name updates $job. run failed\n");
	header("HTTP/1.1 500 User $name updates $job. Failed to update run");
	exit(0);
      }
    } else {
      kp_log($root, "User $name removes $job/run");
      unlink( $root."/exe/".$job."/run" );
    }

    exit(0);
  }

  # Execute job
  if($attr == 'run') {
    $validator = getvalidator($root, $job, 'param1');
    if($validator) {
      if(validate_param('param1', $validator)) {
	header("HTTP/1.1 403 Forbidden: invalid input: param1 validator: $validator");
	print "invalid input: '".$_REQUEST['param1']."' validator: $validator";
	file_put_contents( $root."/log/kp.log", "User $name execute: $job param1 invalid input: '".$_REQUEST['param1']."' validator: $validator\n", FILE_APPEND);
	exit(0);
      }
      putenv("PARAM1=".$_REQUEST['param1']);
    }
    $validator = getvalidator($root, $job, 'param2');
    if($validator) {
      if(validate_param('param2', $validator)) {
	header("HTTP/1.1 403 Forbidden: invalid input: param2 validator: $validator");
	print "invalid input: '".$_REQUEST['param2']."' validator: $validator";
	file_put_contents( $root."/log/kp.log", "User $name execute: $job param2 invalid input: '".$_REQUEST['param2']."' validator: $validator\n", FILE_APPEND);
	exit(0);
      }
      putenv("PARAM2=".$_REQUEST['param2']);
    }
    $validator = getvalidator($root, $job, 'param3');
    if($validator) {
      if(validate_param('param3', $validator)) {
	header("HTTP/1.1 403 Forbidden: invalid input: param3 validator: $validator");
	print "invalid input: '".$_REQUEST['param3']."' validator: $validator";
	file_put_contents( $root."/log/kp.log", "User $name execute: $job param3 invalid input: '".$_REQUEST['param3']."' validator: $validator\n", FILE_APPEND);
	exit(0);
      }
      putenv("PARAM3=".$_REQUEST['param3']);
    }
    
    $d = date("Ymd\-G\:i\:s\-").$name;
    if (! function_exists('pcntl_fork')) {
      header("HTTP/1.1 503 PCNTL functions not available on this PHP installation. KP wont work");
      print('PCNTL functions not available on this PHP installation. KP wont work!');
      file_put_contents( $root."/log/kp.log", "PCNTL functions not available on this PHP installation. KP wont work!\n", FILE_APPEND);
      exit(0);
    }
    file_put_contents( $root."/log/kp.log", "User $name executes: $job log: $d\n", FILE_APPEND);
    $pid = pcntl_fork();
    if($pid == 0) {
      posix_setsid();
      file_put_contents("$root/log/$d.job", $job);
      file_put_contents("$root/log/$d.start", time());
      file_put_contents("$root/log/$d.roles", file_get_contents($root."/exe/".$job."/roles"));

      $secrets = $root."/secrets/".$KPSECRETS."/".$job;
      putenv("KPSECRETS"); # Security: dont leak secret to jobs
      
      if($_SERVER["KPSANDBOX"] == "yes") {
	  $rundir = $root."/saferun";
	  #system("tar cf - $secrets|sandbox $root/exe/$job/run >> $root/log/$d 2>> $root/log/$d < /dev/null", $status);
      } else {
	# create runtime directory
	$rundir = $root."/run/".$d;
	mkdir($rundir);
	putenv("HOME=".$rundir);
      
	# populate with per-job secrets
	if(file_exists($secrets)) {
	  copyfiles($root."/secrets/".$KPSECRETS."/".$job, $rundir);
	}
	
	# change cwd to runtime directory
	chdir($rundir);
	system("$root/exe/$job/run >> $root/log/$d 2>> $root/log/$d < /dev/null", $status);
	deldir($rundir);
      }
      file_put_contents("$root/log/$d.end", time());
      file_put_contents("$root/log/$d.status", $status);
      
      # Since I never managed to close stdout and stderr within PHP, we kill our process instead.
      # If we dont do this PHP will output headers from the child also..
      posix_kill(posix_getpid(), SIGKILL);
      exit(0);
    }
    print $d;
    exit(0);
  }
}

header("HTTP/1.1 404 Nope");
?>
